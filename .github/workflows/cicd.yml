name: CI/CD Workflow

on:
  pull_request:
    branches:
      - main
      - master
      - 'feature/*'

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [14]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v2.1.4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn

      - name: Run linter 👀
        run: yarn lint

      - name: Run tests 🧪
        run: yarn test

      - name: Generate .env file for Deployment 📝
        run: |
          cat <<EOF > .env
          BASE_URL=http://storage.googleapis.com
          ROUTER_BASE=/${{ secrets.GCP_BUCKET_NAME }}/${{ github.event.repository.name }}/${{ github.event.number }}/
          EOF

      - name: Build and Generate 🔧
        run: yarn generate

      - name: Archive to artifact 📦
        uses: actions/upload-artifact@master
        with:
          name: dist
          path: dist

  pullrequest-driven-deployment:
    if: ${{ github.event_name == 'pull_request' }}

    needs:
      - ci

    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Download Artifact 📦
        uses: actions/download-artifact@master
        with:
          name: dist
          path: artifact/${{ github.event.repository.name }}/${{ github.event.number }}

      - name: Login to Google Cloud 🆔
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK 🏗
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Google Cloud Storage 🚚
        run: |
          # Undeploy legacy contents
          gsutil -m rm -r gs://${{ secrets.GCP_BUCKET_NAME }}/${{ github.event.repository.name }}/${{ github.event.number }} 2> /dev/null || true
          # Deploy new contents
          gsutil -m -h "Cache-Control:no-store" cp -a public-read -r artifact/* gs://${{ secrets.GCP_BUCKET_NAME }}

      - name: Create comments message 📝
        run: |
          cat << EOF > comments
          Deployed the latest code to Google Cloud Storage.
          http://storage.googleapis.com/${{ secrets.GCP_BUCKET_NAME }}/${{ github.event.repository.name }}/${{ github.event.number }}/
          EOF

      - name: Post comments to PR 📮
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          URL: ${{ github.event.pull_request.html_url }}
        run: gh pr comment -F ./comments "${URL}"
